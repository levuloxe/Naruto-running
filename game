import pygame
from player import Player
from coin import Coin
from enemy import Enemy
from random import randint

class Game():
    def __init__(self, screen, screen_width, screen_height):
        self.screen = screen
        self.screen_width = screen_width
        self.screen_height = screen_height

        self.bg_image = pygame.image.load('asset/background.png').convert_alpha()
        self.bg_image = pygame.transform.scale(self.bg_image, (self.screen_width, self.screen_height))

        #player
        player_sprite = Player((self.screen_width / 2, self.screen_height - 100), self.screen_width)
        self.player = pygame.sprite.GroupSingle(player_sprite)
        self.score = 0

        #health and score setup
        self.lives = 3
        self.live_surf = pygame.image.load('asset/Coin/heart.png').convert_alpha()
        self.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)
        self.score = 0
        self.font = pygame.font.Font('asset/NinjaNaruto.ttf', 20)

        #coin
        coin_sprite = Coin(self.screen_width, self.screen_height)
        self.coin = pygame.sprite.Group(coin_sprite)
        self.coin_adding_time = randint(30, 50)

        #enemy
        enemy_sprite = Enemy(self.screen_width, self.screen_height)
        self.enemy = pygame.sprite.Group(enemy_sprite)
        self.enemy_adding_time = randint(40, 50)

        #font
        self.font = pygame.font.Font('asset/ThaleahFat.ttf', 50)
        self.font_header = pygame.font.Font('asset/NinjaNaruto.ttf', 100)

        #audio
        self.coin_sound = pygame.mixer.Sound('asset/Audio/coin.wav')
        self.coin_sound.set_volume(2)

        self.die_sound = pygame.mixer.Sound('asset/Audio/die.wav')

        self.gameover = False

    def add_coin(self):
        self.coin_adding_time -= 1
        if self.coin_adding_time <= 0:
            self.coin.add(Coin(self.screen_width, self.screen_height))
            self.coin_adding_time = randint(30, 50)

    def add_enemy(self):
        self.enemy_adding_time -= 1
        if self.enemy_adding_time <= 0:
            self.enemy.add(Enemy(self.screen_width, self.screen_height))
            self.enemy_adding_time = randint(40, 50)

    def display_lives(self):
        for live in range(self.lives - 1):
            x = self.live_x_start_pos + (live * (self.live_surf.get_size()[0] + 10))
            self.screen.blit(self.live_surf,(x,8))

    def collision(self):
        for coin in self.coin:
            if pygame.sprite.spritecollide(coin, self.player, False):
                coin.kill()
                self.score += 1
                self.coin_sound.play()
                self.coin_sound.set_volume(4)

        for enemy in self.enemy:

            if pygame.sprite.spritecollide(enemy, self.player, False):
                enemy.kill()
                self.lives -= 1
                self.die_sound.play()
                if self.lives <= 0:
                    self.gameover = True
                    self.die_sound.play()

    def display_score(self):
        score_surf = self.font.render(f'score = {self.score}', False, 'white')
        score_rect = score_surf.get_rect(center = (self.screen_width/2, 50))
        self.screen.blit(score_surf, score_rect)

    def gameover_scene(self):
        gameover_surf = self.font_header.render('dattebayo~~~', False, 'white')
        gameover_rect = gameover_surf.get_rect(center = (self.screen_width/2 +50, self.screen_height/2))
        self.screen.blit(gameover_surf, gameover_rect)

        score_surf = self.font.render(f'score = {self.score}', False, 'white')
        score_rect = score_surf.get_rect(center = (self.screen_width/2, self.screen_height/2 + 100))
        self.screen.blit(score_surf, score_rect)

    def run(self):
        self.screen.blit(self.bg_image, (0, 0))

        if not self.gameover:
            self.player.draw(self.screen)
            self.player.update()

            self.coin.draw(self.screen)
            self.coin.update()
            self.add_coin()

            self.enemy.draw(self.screen)
            self.enemy.update()
            self.add_enemy()
            self.display_lives()

            self.collision()
            self.display_score()
        else:
            self.gameover_scene()
